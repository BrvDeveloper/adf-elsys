{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Parquet2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet3",
						"type": "DatasetReference"
					},
					"name": "GravaTmp"
				}
			],
			"transformations": [
				{
					"name": "LatitudeDiferenteZero"
				},
				{
					"name": "OrderByCodigoLancamento"
				},
				{
					"name": "NrRankIgualUm"
				},
				{
					"name": "AddNrRank"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CODIGO_LANCAMENTO as integer,",
				"          VERSAO_CABECALHO as binary,",
				"          DATA_COLETA as timestamp,",
				"          NUMERO_SERIAL as string,",
				"          NUMERO_IMEI as string,",
				"          NUMERO_MAC as string,",
				"          VERSAO_SOFTWARE_EQUIPAMENTO as binary,",
				"          VERSAO_SOFTWARE_MODULO_CELULAR as binary,",
				"          MCC_EQUIPAMENTO_CONECTADO as integer,",
				"          MNC_EQUIPAMENTO_CONECTADO as integer,",
				"          NOME_OPERADORA_TELEFONIA as string,",
				"          TECNOLOGIA_CONEXAO as string,",
				"          LARGURA_BANDA_DOWNLOAD as string,",
				"          LARGURA_BANDA_UPLOAD as string,",
				"          NIVEL_SINAL as integer,",
				"          QUALIDADE_SINAL as integer,",
				"          FREQUENCIA as decimal(16,6),",
				"          CODIGO_LOCALIZACAO_AREA_ERB as binary,",
				"          CODIGO_ESTACAO_RADIOBASE as binary,",
				"          TENSAO_POE as decimal(16,6),",
				"          TEMPERATURA_PA as integer,",
				"          TEMPERATURA_XO as integer,",
				"          TEMPERATURA_PMIC as integer,",
				"          TIPO_ANTENA as boolean,",
				"          MODO_DISCAGEM as boolean,",
				"          STATUS_CONEXAO as boolean,",
				"          HABILITACAO_IPV6 as boolean,",
				"          HABILITACAO_RESET_PROGRAMADO as boolean,",
				"          UTILIZACAO_TELEFONE as boolean,",
				"          DATA_INCLUSAO_COLETA as timestamp,",
				"          CODIGO_BINARIO as binary,",
				"          IP_REDE_WAN as string,",
				"          LATITUDE_GPS as decimal(9,6),",
				"          LONGITUDE_GPS as decimal(9,6),",
				"          DATA_INCLUSAO as timestamp,",
				"          DATA_ALTERACAO as timestamp,",
				"          ORIGEM as string,",
				"          CONSUMO_DADOS_BYTE_UPLOAD as decimal(26,0),",
				"          CONSUMO_DADOS_BYTE_DOWNLOAD as decimal(26,0),",
				"          DATA_REFERENCIA as timestamp,",
				"          LATITUDE_ERB as decimal(9,6),",
				"          LONGITUDE_ERB as decimal(9,6),",
				"          NOME_CIDADE as string,",
				"          NOME_ESTADO as string,",
				"          NOME_REGIAO as string,",
				"          VERSAO_SOFTWARE_EQUIPAMENTO_ORIGEM as string,",
				"          VERSAO_SOFTWARE_MODULO_CELULAR_ORIGEM as string,",
				"          NR_RANK_DESC as long,",
				"          NR_RANK_ASC as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"source1 filter(LATITUDE_GPS != 0.0) ~> LatitudeDiferenteZero",
				"LatitudeDiferenteZero sort(asc(CODIGO_LANCAMENTO, true)) ~> OrderByCodigoLancamento",
				"AddNrRank filter(NR_RANK == 1) ~> NrRankIgualUm",
				"OrderByCodigoLancamento window(over(NUMERO_SERIAL),",
				"     asc(CODIGO_LANCAMENTO, true),",
				"     NR_RANK = rowNumber()) ~> AddNrRank",
				"source1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CODIGO_LANCAMENTO as integer,",
				"          VERSAO_CABECALHO as binary,",
				"          DATA_COLETA as timestamp,",
				"          NUMERO_SERIAL as string,",
				"          NUMERO_IMEI as string,",
				"          NUMERO_MAC as string,",
				"          VERSAO_SOFTWARE_EQUIPAMENTO as binary,",
				"          VERSAO_SOFTWARE_MODULO_CELULAR as binary,",
				"          MCC_EQUIPAMENTO_CONECTADO as integer,",
				"          MNC_EQUIPAMENTO_CONECTADO as integer,",
				"          NOME_OPERADORA_TELEFONIA as string,",
				"          TECNOLOGIA_CONEXAO as string,",
				"          LARGURA_BANDA_DOWNLOAD as string,",
				"          LARGURA_BANDA_UPLOAD as string,",
				"          NIVEL_SINAL as integer,",
				"          QUALIDADE_SINAL as integer,",
				"          FREQUENCIA as decimal(16,6),",
				"          CODIGO_LOCALIZACAO_AREA_ERB as binary,",
				"          CODIGO_ESTACAO_RADIOBASE as binary,",
				"          TENSAO_POE as decimal(16,6),",
				"          TEMPERATURA_PA as integer,",
				"          TEMPERATURA_XO as integer,",
				"          TEMPERATURA_PMIC as integer,",
				"          TIPO_ANTENA as boolean,",
				"          MODO_DISCAGEM as boolean,",
				"          STATUS_CONEXAO as boolean,",
				"          HABILITACAO_IPV6 as boolean,",
				"          HABILITACAO_RESET_PROGRAMADO as boolean,",
				"          UTILIZACAO_TELEFONE as boolean,",
				"          DATA_INCLUSAO_COLETA as timestamp,",
				"          CODIGO_BINARIO as binary,",
				"          IP_REDE_WAN as string,",
				"          LATITUDE_GPS as decimal(9,6),",
				"          LONGITUDE_GPS as decimal(9,6),",
				"          DATA_INCLUSAO as timestamp,",
				"          DATA_ALTERACAO as timestamp,",
				"          ORIGEM as string,",
				"          CONSUMO_DADOS_BYTE_UPLOAD as decimal(26,0),",
				"          CONSUMO_DADOS_BYTE_DOWNLOAD as decimal(26,0),",
				"          DATA_REFERENCIA as timestamp,",
				"          LATITUDE_ERB as decimal(9,6),",
				"          LONGITUDE_ERB as decimal(9,6),",
				"          NOME_CIDADE as string,",
				"          NOME_ESTADO as string,",
				"          NOME_REGIAO as string,",
				"          VERSAO_SOFTWARE_EQUIPAMENTO_ORIGEM as string,",
				"          VERSAO_SOFTWARE_MODULO_CELULAR_ORIGEM as string,",
				"          NR_RANK_DESC as long,",
				"          NR_RANK_ASC as long",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['tmp_ods_dados_amplimax_mes_fechado_10'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> GravaTmp"
			]
		}
	}
}